/** @format */
"use server";
import { config } from "@/config/config";
import { MergedDataPage } from "@/components/mergeJSON";
import { cookies } from "next/headers";

export async function getVulnerability(id: string): Promise<JSON | null> {
  const cookieStore = cookies();
  const sessionToken = (await cookieStore).get("session_token")?.value;

  const res = await fetch(
    `${config.NEXT_PUBLIC_BASE_URL}/api/vulnerabilities/${id}`,
    {
      headers: {
        Cookie: `session_token=${sessionToken}`,
      },
      cache: "no-store",
    }
  );

  if (!res.ok) return null;
  const contentType = res.headers.get("content-type");
  if (!contentType?.includes("application/json")) {
    const text = await res.text();
    console.error("Respuesta no JSON:", text.slice(0, 200));
    return null;
  }
  return res.json();
}

export default async function VulnerabilityPage(context: {
  params: { id: string };
}) {
  const { params } = await context;
  const id = params.id;
  console.log("Vulnerability ID:", id);

  if (!id) {
    return <div>No se proporcionó un ID de vulnerabilidad.</div>;
  }

  const data = await getVulnerability(id);

  if (!data) {
    return <div>No se encontró la vulnerabilidad {id}</div>;
  }

  return (
    <div>
      <MergedDataPage data={data} />
    </div>
  );
}
