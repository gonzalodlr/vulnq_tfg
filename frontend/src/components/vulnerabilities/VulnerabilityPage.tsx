/** @format */
"use client";
import React, { useEffect, useState } from "react";
import { Button } from "@/components/ui/button";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  CvssMetric,
  ScanResultItem,
  ScanResultsProps,
} from "@/types/ScanResultsProps";

import { Loader2 } from "lucide-react";
import { fetchAssets } from "@/controllers/assetsController";
import { fetchSoftwares } from "@/controllers/softwaresController";
import { IAsset } from "@/types/IAsset";
import { ISoftware } from "@/types/ISoftware";
import { getAssetIcon } from "@/components/AssetTypeSelect";
import ScanResults from "@/components/auditResults";
import { toast } from "sonner";
/**
 * Vulnerability Scanner Page
 *
 * Features (phase 1):
 *  â€“ Scan a *single* piece of software chosen by the user.
 *  â€“ Scan *all* software registered in the platform.
 *  â€“ Scan by *asset* (e.g., server, container, etc.).
 *
 * Notes for backâ€‘end team:
 *  â€“ Expose `GET /api/scan?mode=single&software=<slug>`
 *  â€“ Expose `GET /api/scan?mode=all`
 *  â€“ Return JSON list: [{ software, title, severity, cve }]
 *
 */

const clearString = (str: string | null | undefined): string => {
  if (!str) return "";
  try {
    // Try to parse as JSON array
    const arr = JSON.parse(str);
    if (Array.isArray(arr)) {
      // Filter out null/empty, join as string
      return arr.filter((v) => typeof v === "string" && v.trim()).join(", ");
    }
  } catch {
    // Not a JSON array, fallback
    return str
      .replace(/^\[|\]$/g, "")
      .replace(/"/g, "")
      .trim();
  }
  return "";
};

export default function VulnerabilityScannerPage() {
  const [scanMode, setScanMode] = useState<"single" | "all" | "asset">("asset");
  const [selectedSoftware, setSelectedSoftware] = useState<ISoftware | null>(
    null
  );
  const [buttonPressed, setButtonPressed] = useState(false);
  const [isScanning, setIsScanning] = useState(false);
  const [results, setResults] = useState<ScanResultItem[]>([]);
  const [error, setError] = useState<string | null>(null);
  const [assets, setAssets] = useState<IAsset[]>([]);
  const [software, setSoftware] = useState<ISoftware[]>([]);
  const [selectedAssetId, setSelectedAssetId] = useState<string | null>(null);

  useEffect(() => {
    const fetchAssetsData = async () => {
      const assetsData = await fetchAssets();
      setAssets(assetsData);
    };
    fetchAssetsData();

    const fetchSoftwareData = async () => {
      const softwaresData = await fetchSoftwares();
      setSoftware(softwaresData);
    };
    fetchSoftwareData();
  }, []);

  const handleScan = async () => {
    setIsScanning(true);
    setError(null);
    setResults([]);

    try {
      const params: Record<string, string> = { mode: scanMode };

      if (scanMode === "single" && selectedSoftware) {
        params.software = selectedSoftware.id_software;
      } else if (scanMode === "asset" && selectedAssetId) {
        params.assetId = selectedAssetId;
      }

      const response = await fetch(`/api/scan?${new URLSearchParams(params)}`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(selectedSoftware),
      });
      if (!response.ok) throw new Error(`Scan failed â€” ${response.statusText}`);
      const data: ScanResultItem[] = await response.json();
      const cleanedData = data.map((item) => {
        const parseAndClean = (field: any) => {
          let arr: any[] = [];
          if (Array.isArray(field)) {
            arr = field;
          } else if (typeof field === "string") {
            try {
              const parsed = JSON.parse(field);
              if (Array.isArray(parsed)) arr = parsed;
              else arr = [parsed];
            } catch {
              arr = [field];
            }
          }
          return arr.filter((id) => id && id !== "null" && id !== null).map((id) => clearString(id));
        };
        return {
          ...item,
          cwe_ids: parseAndClean(item.cwe_ids),
          capec_ids: parseAndClean(item.capec_ids),
          cpe_ids: parseAndClean(item.cpe_ids),
        };
      });
      setResults(cleanedData);
      //setResults(data);
    } catch (err: any) {
      setError(err.message ?? "Unknown error");
    } finally {
      setIsScanning(false);
      setButtonPressed(true);
    }
  };

  const saveReport = async (results: any) => {
    // send the report to the backend for saving
    await fetch("/api/save-report", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ results }),
    })
      .then((res) => {
        console.log("Save report response:", res);
        if (!res.ok) throw new Error("Failed to save report");
        return res.json();
      })
      .then((data) => {
        toast("Report saved successfully!");
      })
      .catch((err) => {
        console.error("Error saving report:", err);
        toast.error("Failed to save report: " + err.message);
      });
  };

  return (
    <div className="p-8 space-y-6">
      <h1 className="text-3xl font-bold">Vulnerability Scanner</h1>
      {/* Scan type selector (hidden after scan is started) */}
      {!isScanning && results.length === 0 && !error && (
        <div className="flex gap-4">
          <Button
            variant={scanMode === "single" ? "default" : "outline"}
            onClick={() => {
              setScanMode("single");
              setButtonPressed(false);
            }}
            disabled
          >
            Selected Software
          </Button>
          <Button
            variant={scanMode === "all" ? "default" : "outline"}
            onClick={() => {
              setScanMode("all");
              setButtonPressed(false);
            }}
            disabled
          >
            All My Software
          </Button>
          <Button
            variant={scanMode === "asset" ? "default" : "outline"}
            onClick={() => {
              setScanMode("asset");
              setButtonPressed(false);
            }}
          >
            By Asset
          </Button>
        </div>
      )}
      {/* Software picker (only for singleâ€‘software mode, before scan) */}
      {!isScanning && results.length === 0 && scanMode === "single" && (
        <Select
          value={selectedSoftware ? JSON.stringify(selectedSoftware) : ""}
          onValueChange={(value) => {
            const sw = software.find((s) => JSON.stringify(s) === value);
            setSelectedSoftware(sw ?? null);
          }}
        >
          <SelectTrigger className="w-64">
            <SelectValue placeholder="Choose softwareâ€¦" />
          </SelectTrigger>
          <SelectContent>
            {software.map((sw) => (
              <SelectItem key={sw.id_software} value={JSON.stringify(sw)}>
                {sw.software_name}
              </SelectItem>
            ))}
          </SelectContent>
        </Select>
      )}
      {/* Asset picker (asset mode, before scan) */}
      {!isScanning && results.length === 0 && scanMode === "asset" && (
        <Select
          value={selectedAssetId ?? ""}
          onValueChange={(v) => setSelectedAssetId(v)}
        >
          <SelectTrigger className="w-72">
            <SelectValue placeholder="Choose assetâ€¦" />
          </SelectTrigger>
          <SelectContent>
            {assets.length === 0 && (
              <div className="px-4 py-2 text-sm text-muted-foreground">
                No assets found
              </div>
            )}
            {assets.map((asset) => (
              <SelectItem
                key={asset.id}
                value={asset.id}
                className="flex gap-2"
              >
                {getAssetIcon(asset.type)} {asset.name}
              </SelectItem>
            ))}
          </SelectContent>
        </Select>
      )}
      {/* Scan button (only before scan) */}
      {!isScanning && results.length === 0 && !error && (
        <Button
          onClick={handleScan}
          disabled={
            isScanning ||
            (scanMode === "single" && !selectedSoftware) ||
            (scanMode === "asset" && (selectedAssetId ?? "").length === 0)
          }
        >
          {isScanning && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
          {isScanning ? "Scanningâ€¦" : "Start Scan"}
        </Button>
      )}
      {/* Error message */}
      {error && (
        <div className="flex flex-col items-center gap-2 text-center">
          <p className="text-red-600 font-medium">{error}</p>
          <Button
            onClick={() => {
              setError(null);
              setResults([]);
            }}
          >
            Back
          </Button>
        </div>
      )}
      {/* Results table */}
      {results.length > 0 ? (
        <>
          <ScanResults results={results} />
          <div className="flex gap-4 mt-4">
            <Button
              onClick={() => {
                saveReport(results);
              }}
              variant="secondary"
            >
              Save Report
            </Button>
            <Button
              onClick={() => {
                setResults([]);
                setError(null);
              }}
              className="mt-0"
            >
              New Scan
            </Button>
          </div>
        </>
      ) : (
        !isScanning &&
        !error &&
        buttonPressed &&
        results.length === 0 && (
          <div className="flex flex-col items-center gap-2 text-center">
            <span className="text-5xl">ðŸŽ‰</span>
            <p className="text-lg font-semibold text-green-700">
              No vulnerabilities found!
            </p>
            <p className="text-muted-foreground">
              Your software is looking secure. Keep up the good work!
            </p>
          </div>
        )
      )}
      {/* Loader (during scan) */}
      {isScanning && (
        <div className="flex flex-col items-center gap-2 text-center">
          <Loader2 className="h-8 w-8 animate-spin" />
          <p className="text-lg font-semibold">Scanning in progressâ€¦</p>
        </div>
      )}
    </div>
  );
}
